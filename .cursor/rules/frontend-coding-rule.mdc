---
description: 
globs: 
alwaysApply: true
---
---
description: フロントエンド開発におけるコーディングルール
globs: ["app/**/*", "components/**/*", "lib/**/*"]
alwaysApply: true
---

# フロントエンド開発ルール

## 1. 命名規則
- コンポーネント名: PascalCase（例：`UserProfile.tsx`）
- ファイル名:
  - コンポーネント: PascalCase
  - ユーティリティ関数: camelCase
  - 定数: UPPER_SNAKE_CASE
- フォルダ構造:
  - `components/`: 再利用可能なUIコンポーネント
  - `lib/`: ユーティリティ関数やヘルパー
  - `api/`: API関連のロジック
  - `styles/`: スタイリング関連

## 2. テストと品質管理
- TypeScriptによる型安全性の確保
- 定期的なコードレビューの実施

## 3. エラーハンドリング
- グローバルエラーバウンダリの実装
- APIエラーの統一的なハンドリング
- ユーザーフレンドリーなエラーメッセージの表示
- エラーログの適切な記録

## 4. コメントアウト
- すべてのコードに必ずコメントを追加
- JSDoc形式での関数説明
- 一時的なコメントアウトは最小限に
- 日本語でのコメント記述

## 5. ドキュメント
- README.mdの充実
  - プロジェクト概要
  - セットアップ手順
  - 開発環境の要件
  - デプロイ手順
- コンポーネントの使用方法のドキュメント化
- API仕様書の整備
- 変更履歴の管理

## 6. その他のベストプラクティス
- コンポーネントの分割と再利用性の考慮
- 状態管理の適切な実装
- パフォーマンス最適化の実施
- アクセシビリティの